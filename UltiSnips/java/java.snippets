priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

global !p
def junit(snip):
  if snip.opt("g:ultisnips_java_junit", "") == "3":
    snip += ""
  else:
    snip.rv += "@Test\n  "

def nl(snip):
  if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
    snip += ""
  else:
    snip.rv += " "
def getArgs(group):
  import re
  word = re.compile('[a-zA-Z0-9><.]+ \w+')
  return [i.split(" ") for i in word.findall(group) ]

def camel(word):
  if not word: return ''
  return word[0].upper() + word[1:]

def mixedCase(word):
  if not word: return ''
  return word[0].lower() + word[1:]

endglobal

snippet /o|v/ "new Object or variable" br
${1:Object} ${2:var} = new $1($3);
endsnippet

snippet f "field" b
${1:private} ${2:String} ${3:`!p snip.rv = t[2].lower()`};
endsnippet

snippet ab "abstract" b
abstract $0
endsnippet

snippet cl "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
  $0
}
endsnippet

snippet cli "class with constructor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` ${2:extends ${3:Parent} }{
`!p
args = getArgs(t[1])
for i in args:
  snip.rv += "\n  private " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
  snip.rv += "\n"`
  @Inject
  public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
  snip.rv += "\n    this.%s = %s;" % (i[1], i[1])
if len(args) == 0:
  snip.rv += "\n"`
  }
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
  `!p
args = getArgs(t[1])
for i in args:
  snip.rv += "\n  private " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
  snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
  snip.rv += "\n    this.%s = %s;" % (i[1], i[1])
if len(args) == 0:
  snip.rv += "\n"`
}
endsnippet

snippet m  "method" b
${1:private} ${2:void} ${3:method}($4) {
  ${0:${VISUAL}}
}
endsnippet

snippet /get(ter)?/ "getter" br
public ${1:String} get${2:Name}() {
  return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
  this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
  this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2 get$1() {
  return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet pr "private" b
private $0
endsnippet

snippet po "protected" b
protected $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet re "return" b
return $0;
endsnippet

snippet st "static"
static $0
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet fi "final" b
final $0
endsnippet

snippet in "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
  $0
}
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet th "throw" b
throw new $0
endsnippet
