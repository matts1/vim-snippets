## basic typew
snippet car "const auto&" w
const auto& ${1}
endsnippet
snippet ca "const auto" w
const auto ${1}
endsnippet
snippet ar "auto&" w
auto& ${1}
endsnippet
snippet a "auto" w
auto ${1}
endsnippet
snippet c "const" w
const ${1}
endsnippet

snippet arr "array" w
std::array<${1:T}, ${2:N}> ${3}
endsnippet

snippet vec "vector" w
std::vector<${1:T}> ${2}
endsnippet

snippet deque "deque" w
std::deque<${1:T}> ${2}
endsnippet

snippet flist "forward_list" w
std::forward_list<${1:T}> ${2}
endsnippet

snippet list "list" w
std::list<${1:T}> ${2}
endsnippet

snippet set "set" w
std::set<${1:T}> ${2}
endsnippet

snippet map "map" w
std::map<${1:Key}, ${2:T}> ${3}
endsnippet

snippet mset "multiset" w
std::multiset<${1:T}> ${2}
endsnippet

snippet mmap "multimap" w
std::multimap<${1:Key}, ${2:T}> ${3}
endsnippet

snippet uset "unordered_set" w
std::unordered_set<${1:T}> ${2}
endsnippet

snippet umap "unordered map" w
std::unordered_map<${1:Key}, ${2:T}> ${3}
endsnippet

snippet umset "unordered multiset" w
std::unordered_multiset<${1:T}> ${2}
endsnippet

snippet ummap "unordered multimap" w
std::unordered_multimap<${1:Key}, ${2:T}> ${3}
endsnippet

snippet stack "stack" w
std::stack<${1:T}> ${2}
endsnippet

snippet queue "queue" w
std::queue<${1:T}> ${2}
endsnippet

snippet pq "priority queue" w
std::priority_queue<${1:T}> ${2}
endsnippet

snippet str "string" w
string
endsnippet

snippet pair "pair" w
std::pair<${1:T}, ${2:V}> ${3}
endsnippet

snippet mp "make pair" w
std::make_pair(${1}, ${2})
endsnippet

snippet up "unique pointer" w
std::unique_pointer<${1:T}>
endsnippet

snippet mu "make unique" w
std::make_unique(${1:${VISUAL}})
endsnippet

snippet sp "shared pointer" w
std::unique_pointer<${1:T}>
endsnippet

snippet ms "make shared" w
std::make_shared(${1:${VISUAL}})
endsnippet

snippet wp "weak pointer" w
std::unique_pointer<${1:T}>
endsnippet

## Casts
snippet sca "static cast" w
static_cast<${1}>(${2:${VISUAL}})
endsnippet

snippet dca "dynamic cast" w
dynamic_cast<${1}>(${2:${VISUAL}})
endsnippet

snippet rca "reinterpret cast" w
reinterpret_cast<${1}>(${2:${VISUAL}})
endsnippet
